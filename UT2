import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.mockito.Mockito.*;

class AcceleratorCardSubmitFlowPublicTest {

    @InjectMocks
    private AsyncOnboardingService asyncOnboardingService; // Replace with your actual class name

    @Mock
    private KYCInformationUtilityService kycInformationUtilityService;

    @Mock
    private DocManagementService docManagementService;

    @Mock
    private AppLogger appLogger;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testSingleSignerFirstSubmission() throws Exception {
        Long kycId = 123L;
        String uuid = "test-uuid";
        String ipAddress = "192.168.1.1";
        boolean isReprocess = false;
        KYCInformationDTO kycInformation = new KYCInformationDTO();
        CmlCardBaseDTO cmlCardBaseDTO = new CmlCardBaseDTO();
        Gson gson = new GsonBuilder().create();

        // Mock behavior
        when(kycInformationUtilityService.isRegularCardRequest(kycId, kycInformation)).thenReturn(true);

        // Call the public method directly
        asyncOnboardingService.acceleratorCardSubmitFlow(kycId, uuid, ipAddress, isReprocess, kycInformation, cmlCardBaseDTO, gson);

        // Verify that the appropriate methods are invoked
        verify(kycInformationUtilityService).isRegularCardRequest(kycId, kycInformation);
        verify(asyncOnboardingService).generateSubmitCcaPdf(kycId, uuid, ipAddress);
        verifyNoInteractions(docManagementService); // Ensure no unnecessary calls
    }

    @Test
    void testSingleSignerReprocess() throws Exception {
        Long kycId = 123L;
        String uuid = "test-uuid";
        String ipAddress = "192.168.1.1";
        boolean isReprocess = true;
        KYCInformationDTO kycInformation = new KYCInformationDTO();
        CmlCardBaseDTO cmlCardBaseDTO = new CmlCardBaseDTO();
        Gson gson = new GsonBuilder().create();

        // Mock behavior
        when(kycInformationUtilityService.isRegularCardRequest(kycId, kycInformation)).thenReturn(true);
        when(docManagementService.isCAPTISDocIdIndexed(kycInformation.getParentKycId(), COLTConstants.ACCELERATOR_CARD_CCA_DOCUMENT_TYPE)).thenReturn(true);

        // Call the public method directly
        asyncOnboardingService.acceleratorCardSubmitFlow(kycId, uuid, ipAddress, isReprocess, kycInformation, cmlCardBaseDTO, gson);

        // Verify that the appropriate methods are invoked
        verify(docManagementService).isCAPTISDocIdIndexed(kycInformation.getParentKycId(), COLTConstants.ACCELERATOR_CARD_CCA_DOCUMENT_TYPE);
        verify(asyncOnboardingService).submitToCardPro(kycId, cmlCardBaseDTO, gson);
        verify(asyncOnboardingService).submitContract(kycId);
    }

    @Test
    void testDualSignerReprocess() throws Exception {
        Long kycId = 123L;
        String uuid = "test-uuid";
        String ipAddress = "192.168.1.1";
        boolean isReprocess = true;
        KYCInformationDTO kycInformation = new KYCInformationDTO();
        CmlCardBaseDTO cmlCardBaseDTO = new CmlCardBaseDTO();
        Gson gson = new GsonBuilder().create();

        // Mock behavior
        when(kycInformationUtilityService.isAuthorizedSignerRequestComplete(kycId, kycInformation)).thenReturn(true);
        when(docManagementService.isCAPTISDocIdIndexed(kycInformation.getParentKycId(), COLTConstants.CORE_SIGNER_AUTHORIZATION_DOC)).thenReturn(true);
        when(docManagementService.isCAPTISDocIdIndexed(kycInformation.getParentKycId(), COLTConstants.ACCELERATOR_CARD_CCA_DOCUMENT_TYPE)).thenReturn(true);

        // Call the public method directly
        asyncOnboardingService.acceleratorCardSubmitFlow(kycId, uuid, ipAddress, isReprocess, kycInformation, cmlCardBaseDTO, gson);

        // Verify that the appropriate methods are invoked
        verify(asyncOnboardingService).submitToCardPro(kycId, cmlCardBaseDTO, gson);
        verify(asyncOnboardingService).submitContract(kycId);
    }

    @Test
    void testDualSignerMissingDocuments() throws Exception {
        Long kycId = 123L;
        String uuid = "test-uuid";
        String ipAddress = "192.168.1.1";
        boolean isReprocess = false;
        KYCInformationDTO kycInformation = new KYCInformationDTO();
        CmlCardBaseDTO cmlCardBaseDTO = new CmlCardBaseDTO();
        Gson gson = new GsonBuilder().create();

        // Mock behavior
        when(kycInformationUtilityService.isAuthorizedSignerRequestComplete(kycId, kycInformation)).thenReturn(true);
        when(docManagementService.isCAPTISDocIdIndexed(kycInformation.getParentKycId(), COLTConstants.ACCELERATOR_CARD_CCA_DOCUMENT_TYPE)).thenReturn(false);

        // Call the public method directly
        asyncOnboardingService.acceleratorCardSubmitFlow(kycId, uuid, ipAddress, isReprocess, kycInformation, cmlCardBaseDTO, gson);

        // Verify CAPTIS indexing logic
        verify(docManagementService).isCAPTISDocIdIndexed(kycInformation.getParentKycId(), COLTConstants.ACCELERATOR_CARD_CCA_DOCUMENT_TYPE);
        verify(asyncOnboardingService).generateSubmitCcaPdf(kycId, uuid, ipAddress);
    }
}
