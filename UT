    @Test
    void testConfirmSection_WhenRequestTypeIsProductsAndNoProductsExists() {
        Long kycId = 123L;

        KYCInformationEntity kycInformationEntity = new KYCInformationEntity();
        kycInformationEntity.setIsBusOpsConfirmed(true);
        kycInformationEntity.setRequestType(COLTConstants.PRODUCTS_TYPE);

        KYCInformationDTO kycInformationDTO = new KYCInformationDTO();
        kycInformationDTO.setRequestType(COLTConstants.PRODUCTS_TYPE);

        Mockito.when(kycInformationRepository.findById(kycId)).thenReturn(Optional.of(kycInformationEntity));
        Mockito.when(cmlCardProductService.getProductsForKYC(kycId)).thenReturn(Collections.emptyList());
        Mockito.when(kycInformationRepository.saveAndFlush(any(KYCInformationEntity.class))).thenReturn(kycInformationEntity);

        KYCInformationDTO result = kycInformationUtilityService.confirmSection(kycId, "businessOperations", true, userId, "ip", false);

        Assertions.assertEquals(kycInformationDTO, result);
    }

    @Test
    void testConfirmSection_WhenRequestTypeIsProductsAndProductsExist() {
        Long kycId = 123L;

        KYCInformationEntity kycInformationEntity = new KYCInformationEntity();
        kycInformationEntity.setIsBusOpsConfirmed(true);
        kycInformationEntity.setRequestType(COLTConstants.PRODUCTS_TYPE);

        KYCInformationDTO kycInformationDTO = new KYCInformationDTO();
        List<Product> productList = List.of(new Product());

        Mockito.when(kycInformationRepository.findById(kycId)).thenReturn(Optional.of(kycInformationEntity));
        Mockito.when(cmlCardProductService.getProductsForKYC(kycId)).thenReturn(productList);
        Mockito.when(kycInformationRepository.saveAndFlush(any(KYCInformationEntity.class))).thenReturn(kycInformationEntity);

        KYCInformationDTO result = kycInformationUtilityService.confirmSection(kycId, "businessOperations", true, userId, "ip", false);

        Assertions.assertEquals(kycInformationDTO, result);
    }
