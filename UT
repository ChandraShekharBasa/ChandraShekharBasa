 
@Test
    public void testGetCostCenter_Success() {
        // Mocking the PartySearchResponse
        PartySearchResponse mockResponse = new PartySearchResponse();
        
        // Mock the ResponseEntity to return the mocked PartySearchResponse
        ResponseEntity<PartySearchResponse> responseEntity = mock(ResponseEntity.class);
        when(responseEntity.getBody()).thenReturn(mockResponse);
        
        // Mock the RestTemplate exchange call to return the mocked ResponseEntity
        when(restTemplate.exchange(
                eq(commCardBaseUrl + "/api/client/getCostCenter?ecid=" + ecid),
                eq(HttpMethod.GET),
                any(HttpEntity.class),
                eq(PartySearchResponse.class)
        )).thenReturn(responseEntity);
        
        // Call the method to test
        PartySearchResponse result = yourService.getCostCenter(ecid);

        // Verify and assert
        assertNotNull(result);
        assertEquals(mockResponse, result);
        verify(restTemplate).exchange(
                eq(commCardBaseUrl + "/api/client/getCostCenter?ecid=" + ecid),
                eq(HttpMethod.GET),
                any(HttpEntity.class),
                eq(PartySearchResponse.class)
        );
    }

    @Test
    public void testGetCostCenter_Exception() {
        // Simulate an exception during the exchange
        when(restTemplate.exchange(
                anyString(),
                eq(HttpMethod.GET),
                any(HttpEntity.class),
                eq(PartySearchResponse.class)
        )).thenThrow(new RuntimeException("Service error"));

        // Verify that an exception is thrown when calling getCostCenter
        DownstreamServicesException exception = assertThrows(
                DownstreamServicesException.class,
                () -> yourService.getCostCenter(ecid)
        );

        // Check exception details
        assertEquals(UIErrorCode.UNEXPECTED_ERROR, exception.getErrorCode());
        assertEquals("Received an unexpected error from TNO service", exception.getMessage());
        
        // Verify logging behavior
        verify(appLogger).error(anyString(), any(Exception.class));
    }
