import { useEffect, useRef } from 'react';
import './video.css';

export interface VideoComponentProps {
	source: string; // Source of the video file
	type: string; // Type of the video (default is 'video/mp4')
	controls?: boolean; // Show video controls (default is true)
	autoplay?: boolean; // Auto play video (default is false)
	loop?: boolean; // Loop video (default is false)
	muted: boolean; // Mute video (default is false)
	className: string; // Custom class name
	poster: string; // Poster image for video
	width?: string; // Sets the width of the video player
	height?: string; //Sets the height of the video player
}

export const Video = ({
	source,
	type,
	controls,
	autoplay,
	loop,
	muted,
	className = 'made-c-video-component',
	poster,
	width,
	height,
}: VideoComponentProps) => {
	const videoRef = useRef(null);

	// this hook is used to update any of the video component properties later
	useEffect(() => {});

	return (
		<Video
			ref={videoRef}
			src={source}
			type={type}
			controls={controls}
			autoPlay={autoplay}
			loop={loop}
			muted={muted}
			className={className}
			poster={poster}
			width={width}
			height={height}
		>
			Your browser does not support the video tag.
		</Video>
	);
};

import React from 'react';
import { render } from '@testing-library/react';

import { Video } from './index';

describe('Video Component', () => {
	test('Video component to load with configuration', async () => {
		const { getByRole, getByTestId } = render(
			<Video
				source="test.mp4"
				type="video/mp4"
				controls={true}
				autoplay={false}
				loop={false}
				muted={false}
				className="made-c-video-component"
				poster="https://via.placeholder.com/150"
				width="640px"
				height="360px"
			/>,
		);

		expect(getByTestId('video-component-element')).toBeInTheDocument();
		expect(getByTestId('video-component-element')).toHaveTextContent(
			'Your browser does not support the video tag. Please try viewing this page in a modern browser',
		);
	});
});


import React from 'react';
import { render } from '@testing-library/react';

import { Video } from './index';

describe('Video Component', () => {
	test('Video component renders with correct attributes', () => {
		const { getByTestId } = render(
			<Video
				source="test.mp4"
				type="video/mp4"
				controls={true}
				autoplay={false}
				loop={false}
				muted={false}
				className="made-c-video-component"
				poster="https://via.placeholder.com/150"
				width="640px"
				height="360px"
			/>
		);

		const videoElement = getByTestId('video-component-element');

		// Check video attributes
		expect(videoElement).toBeInTheDocument();
		expect(videoElement).toHaveAttribute('src', 'test.mp4');
		expect(videoElement).toHaveAttribute('class', 'made-c-video-component');
		expect(videoElement).toHaveAttribute('poster', 'https://via.placeholder.com/150');
		expect(videoElement).toHaveAttribute('width', '640px');
		expect(videoElement).toHaveAttribute('height', '360px');
	});
});


<video controls="" class="default-video" poster="https://via.placeholder.com/150" width="640px" height="360px" data-testid="video-component-element"><source src="http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerEscapes.mp4" type="video/mp4">Your browser does not support the video tag. Please try viewing this page in a modern browser.</video>


const videoElement = getByTestId('video-component-element');

		// Check video attributes
		expect(videoElement).toBeInTheDocument();
		expect(videoElement).toHaveAttribute(
			'poster',
			'https://via.placeholder.com/150'
		);
		expect(videoElement).toHaveAttribute('width', '640px');
		expect(videoElement).toHaveAttribute('height', '360px');
		expect(videoElement).toHaveAttribute('class', 'default-video');

		// Check <source> tag attributes
		const sourceElement = videoElement.querySelector('source');
		expect(sourceElement).toBeInTheDocument();
		expect(sourceElement).toHaveAttribute(
			'src',
			'http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerEscapes.mp4'
		);
		expect(sourceElement).toHaveAttribute('type', 'video/mp4');
