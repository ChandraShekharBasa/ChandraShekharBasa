import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.slf4j.MDC;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;

class CmlCardPaymentInfoServiceImplTest {

    @InjectMocks
    private CmlCardPaymentInfoServiceImpl cmlCardPaymentInfoService;  // The class being tested

    @Mock
    private CmlCardPaymentInfoServiceImpl mockService;  // Mock the same service for internal method calls

    @Mock
    private CmlCardPaymentDTO mockCmlCardPaymentDTO;

    @Mock
    private CmlCardPostResponse mockCmlCardPostResponse;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        MDC.clear();  // Clear MDC to avoid interference between tests
    }

    @Test
    public void testSavePaymentRebateAccountsInfo_WhenUpdatePaymentInfoIsCalled() throws Exception {
        // Arrange
        Long kycId = 12345L;
        CmlCardPaymentDTO cmlCardPaymentDTO = new CmlCardPaymentDTO();
        cmlCardPaymentDTO.setId(1L);  // Non-null ID, update method will be called
        List<CmlCardPaymentDTO> dtoList = Arrays.asList(cmlCardPaymentDTO);

        when(mockService.updatePaymentInfoV2(any(CmlCardPaymentDTO.class), anyLong()))
                .thenReturn(new CmlCardPostResponse(CommonConstants.SUCCESS));  // Mock the update method

        // Act
        List<CmlCardPostResponse> responseList = cmlCardPaymentInfoService.savePaymentRebateAccountsInfo(dtoList, kycId);

        // Assert
        assertNotNull(responseList);
        assertEquals(1, responseList.size());  // Ensure 1 item in response
        verify(mockService, times(1)).updatePaymentInfoV2(any(CmlCardPaymentDTO.class), anyLong());  // Verify update call
        verify(mockService, never()).savePaymentInfoV2(any(CmlCardPaymentDTO.class));  // Ensure save method is not called
    }

    @Test
    public void testSavePaymentRebateAccountsInfo_WhenSavePaymentInfoIsCalled() throws Exception {
        // Arrange
        Long kycId = 12345L;
        CmlCardPaymentDTO cmlCardPaymentDTO = new CmlCardPaymentDTO();
        cmlCardPaymentDTO.setId(null);  // Null ID, save method will be called
        List<CmlCardPaymentDTO> dtoList = Arrays.asList(cmlCardPaymentDTO);

        when(mockService.savePaymentInfoV2(any(CmlCardPaymentDTO.class)))
                .thenReturn(new CmlCardPostResponse(CommonConstants.SUCCESS));  // Mock the save method

        // Act
        List<CmlCardPostResponse> responseList = cmlCardPaymentInfoService.savePaymentRebateAccountsInfo(dtoList, kycId);

        // Assert
        assertNotNull(responseList);
        assertEquals(1, responseList.size());  // Ensure 1 item in response
        verify(mockService, times(1)).savePaymentInfoV2(any(CmlCardPaymentDTO.class));  // Verify save call
        verify(mockService, never()).updatePaymentInfoV2(any(CmlCardPaymentDTO.class), anyLong());  // Ensure update method is not called
    }

    @Test
    public void testSavePaymentRebateAccountsInfo_ThrowsException() {
        // Arrange
        Long kycId = 12345L;
        CmlCardPaymentDTO cmlCardPaymentDTO = new CmlCardPaymentDTO();
        List<CmlCardPaymentDTO> dtoList = Arrays.asList(cmlCardPaymentDTO);

        // Mock the savePaymentInfoV2 to throw an exception
        when(mockService.savePaymentInfoV2(any(CmlCardPaymentDTO.class)))
                .thenThrow(new RuntimeException("Database error"));

        // Act & Assert
        Exception exception = assertThrows(RuntimeException.class, () ->
                cmlCardPaymentInfoService.savePaymentRebateAccountsInfo(dtoList, kycId));

        assertEquals("Database error", exception.getMessage());  // Ensure the exception message is correct
        verify(mockService, times(1)).savePaymentInfoV2(any(CmlCardPaymentDTO.class));  // Verify save call before exception
    }
}
