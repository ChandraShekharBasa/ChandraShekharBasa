@Transactional
    public CmlCardPostResponse savePaymentInfoV2(CmlCardPaymentDTO cmlCardPaymentDTO) {
        try {
            CmlCardPostResponse cmlCardPostResponse = new CmlCardPostResponse();
            Long kycId = cmlCardPaymentDTO.getKycId();
            String kycIdString = kycId.toString();
            log.info("Saving payment info with kycId: {}", kycIdString);
            KYCPaymentInfoEntity kycPaymentInfoEntity = CmlCardPaymentInfoEntityToDTOMapper.mapCmlCardPaymentDtoToKYCPaymentInfoEntity(cmlCardPaymentDTO);
            KYCPaymentInfoEntity savedEntity = kycPaymentInfoRepository.saveAndFlush(kycPaymentInfoEntity);
            cmlCardPostResponse.setId(savedEntity.getId());
            cmlCardPostResponse.setStatus(CommonConstants.SUCCESS);
            return cmlCardPostResponse;
        } catch (Exception e) {
            MDC.put(CommonConstants.ERROR_CODE, LoggingErrorCodes.DATABASE_ERROR);
            log.error("An exception occurred trying to save payment info with kycId: {}", cmlCardPaymentDTO.getKycId(), e);
            throw e;
        }
    }
    @Transactional
    public List<CmlCardPostResponse> savePaymentRebateAccountsInfo(List<CmlCardPaymentDTO> cmlCardPaymentDTOList, Long kycId) {
        List<CmlCardPostResponse> cmlCardPostResponseList;
        try {
            cmlCardPostResponseList = new ArrayList<>();
            String kycIdString = kycId.toString();
            log.info("CML Card service saving/updating payment rebate accounts info with kycId: {}", kycIdString);
            for (CmlCardPaymentDTO cmlCardPaymentDTO : cmlCardPaymentDTOList) {
                try {
                    CmlCardPostResponse cmlCardPostResponse;
                    if(!Objects.isNull(cmlCardPaymentDTO.getId()) && cmlCardPaymentDTO.getId() > 0){
                        cmlCardPostResponse = updatePaymentInfoV2(cmlCardPaymentDTO, cmlCardPaymentDTO.getId());
                    } else {
                        cmlCardPostResponse = savePaymentInfoV2(cmlCardPaymentDTO);
                    }
                    cmlCardPostResponseList.add(cmlCardPostResponse);
                } catch (Exception e) {
                    MDC.put(CommonConstants.ERROR_CODE, LoggingErrorCodes.DATABASE_ERROR);
                    log.error("An exception occurred trying to save card payment accounts info with kycId: {}", cmlCardPaymentDTO.getKycId(), e);
                    throw e;
                }
            }
        } catch (Exception e) {
            MDC.put(CommonConstants.ERROR_CODE, LoggingErrorCodes.DATABASE_ERROR);
            log.error("An exception occurred trying to save card payment accounts info with kycId: {}", kycId, e);
            throw e;
        }
        return cmlCardPostResponseList;
    }
    
    @Transactional
    public CmlCardPostResponse updatePaymentInfoV2(CmlCardPaymentDTO cmlCardPaymentDTO, Long id) {
        try {
            CmlCardPostResponse cmlCardPostResponse = new CmlCardPostResponse();
            Long kycId = cmlCardPaymentDTO.getKycId();
            String kycIdString = kycId.toString();
            log.info("CML Card services updating payment info with kycId: {}", kycIdString);
            Optional<KYCPaymentInfoEntity> previousKYCPaymentInfoEntity = kycPaymentInfoRepository.findById(id);
            if (previousKYCPaymentInfoEntity.isPresent()) {
                KYCPaymentInfoEntity previousKYCPaymentInfoEntityValue = previousKYCPaymentInfoEntity.get();
                KYCPaymentInfoEntity newKYCPaymentInfoEntity = CmlCardPaymentInfoEntityToDTOMapper.mapCmlCardPaymentDtoToKYCPaymentInfoEntity(cmlCardPaymentDTO);
                newKYCPaymentInfoEntity.setId(id);
                newKYCPaymentInfoEntity.setVersion(previousKYCPaymentInfoEntityValue.getVersion());
                kycPaymentInfoRepository.saveAndFlush(newKYCPaymentInfoEntity);
                cmlCardPostResponse.setId(id);
                cmlCardPostResponse.setStatus(CommonConstants.SUCCESS);
            } else {
                log.error("CmlCardPaymentInfoServiceImpl: payment info entity does not exist with kycId: "
                        + "{}", kycIdString);
                cmlCardPostResponse.setStatus(CommonConstants.FAILED);
                throw new OnboardingNotFoundException(UIErrorCode.NOT_FOUND,
                        "No record found in database for the kycId "
                                + "provided: "
                                + kycIdString,
                        MDC.get(CommonConstants.TRACEID));
            }
            return cmlCardPostResponse;
        } catch (Exception e) {
            MDC.put(CommonConstants.ERROR_CODE, LoggingErrorCodes.DATABASE_ERROR);
            log.error("An exception occurred trying to update payment info with kycId: {}",
                    cmlCardPaymentDTO.getKycId(), e);
            throw e;
        }
    }
