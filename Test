import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.mockito.Mockito.*;

class AcceleratorCardSubmitFlowTest {

    @Mock
    private DocManagementService docManagementService;

    @Mock
    private AppLogger appLogger;

    @Mock
    private KycInformationUtilityService kycInformationUtilityService;

    @InjectMocks
    private YourServiceClass service; // Replace with your actual service class

    @Test
    void testCapTISIndexingAndSubmission() throws Exception {
        // Arrange
        MockitoAnnotations.openMocks(this);
        Long kycId = 123L;
        String uuid = "test-uuid";
        String ipAddress = "192.168.1.1";
        KYCInformationDTO kycInformation = mock(KYCInformationDTO.class);
        when(kycInformation.getParentKycId()).thenReturn(456L);

        // Mocking dependencies
        when(docManagementService.isCAPTISDocIdIndexed(456L, COLTConstants.ACCELERATOR_CARD_CCA_DOCUMENT_TYPE)).thenReturn(false);
        when(docManagementService.isCAPTISDocIdIndexed(456L, COLTConstants.CORE_SIGNER_AUTHORIZATION_DOC)).thenReturn(false);

        // Act
        service.privateAcceleratorCardSubmitFlow(kycId, uuid, ipAddress, false, kycInformation, null, null);

        // Assert
        verify(docManagementService).isCAPTISDocIdIndexed(456L, COLTConstants.ACCELERATOR_CARD_CCA_DOCUMENT_TYPE);
        verify(appLogger).info("CAPTIS indexing is not completed for CCA.. initiating CAPTIS submission for kycId: {}", 456L);
        verify(service).generateSubmitCcaPdf(kycId, uuid, ipAddress);

        verify(docManagementService).isCAPTISDocIdIndexed(456L, COLTConstants.CORE_SIGNER_AUTHORIZATION_DOC);
        verify(appLogger).info("CAPTIS indexing is not completed for CSA.. initiating CAPTIS submission for kycId: {}", 456L);
        verify(service).initiateCAPTISIndexing(456L, kycInformation, uuid);
    }
}
