@Test
void testCapTISIndexingThroughPublicMethod() throws Exception {
    // Arrange
    MockitoAnnotations.openMocks(this);
    Long kycId = 123L;
    String uuid = "test-uuid";
    String ipAddress = "192.168.1.1";
    boolean isReprocess = false;

    KYCInformationDTO kycInformation = mock(KYCInformationDTO.class);
    when(kycInformation.getParentKycId()).thenReturn(456L);

    // Mock dependencies
    when(kycInformationUtilityService.getKycInformation(kycId)).thenReturn(kycInformation);
    when(docManagementService.isCAPTISDocIdIndexed(456L, COLTConstants.ACCELERATOR_CARD_CCA_DOCUMENT_TYPE)).thenReturn(false);
    when(docManagementService.isCAPTISDocIdIndexed(456L, COLTConstants.CORE_SIGNER_AUTHORIZATION_DOC)).thenReturn(false);
    when(kycInformationUtilityService.isRegularCardRequest(kycId, kycInformation)).thenReturn(true);

    // Act
    service.initiateAsyncClientOnboardingOps(kycId, uuid, ipAddress, isReprocess);

    // Assert
    verify(docManagementService).isCAPTISDocIdIndexed(456L, COLTConstants.ACCELERATOR_CARD_CCA_DOCUMENT_TYPE);
    verify(appLogger).info("CAPTIS indexing is not completed for CCA.. initiating CAPTIS submission for kycId: {}", 456L);
    verify(service).generateSubmitCcaPdf(kycId, uuid, ipAddress);

    verify(docManagementService).isCAPTISDocIdIndexed(456L, COLTConstants.CORE_SIGNER_AUTHORIZATION_DOC);
    verify(appLogger).info("CAPTIS indexing is not completed for CSA.. initiating CAPTIS submission for kycId: {}", 456L);
    verify(service).initiateCAPTISIndexing(456L, kycInformation, uuid);
}
